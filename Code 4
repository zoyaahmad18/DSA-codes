#include <iostream>

using namespace std;
struct node {
int key;
struct node *left, *right;
};
// Create a node
struct node *newNode(int item) {
struct node *temp = (struct node *)malloc(sizeof(struct node));
temp->key = item;
temp->left = temp->right = NULL;
return temp;
}
//preorder traversal
void preorder(struct node *root) {
if (root != NULL) {
// Traverse root
cout << root->key << " -> ";
// Traverse left
preorder(root->left);
// Traverse right
preorder(root->right);
}
}
node* invertTree(node* root) {
        if(root==NULL)
        return NULL;
        invertTree(root->left);
        invertTree(root->right);
        if(root->right!=NULL&&root->left!=NULL)
        swap(root->left, root->right);
        return root;
    }
// Driver code
int main() {
struct node *root = NULL;
root = insert(root, 4);
root = insert(root, 2);
root = insert(root, 7);
root = insert(root, 1);
root = insert(root, 3);
root = insert(root, 6);
root = insert(root, 9);
cout << "preorder traversal: ";
preorder(root);
cout << "\nAfter inverting\n";
invertTree(root);
cout << "Preorder traversal: ";
preorder(root);
}
